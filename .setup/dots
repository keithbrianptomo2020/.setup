#!/usr/bin/env bash

# Used for the --base-dir flag
declare -r CURRENT_WORKING_DIRECTORY="$(pwd)"

cd "$(dirname "${BASH_SOURCE[0]}")"

# --------------------------------------------------------------------------------------------------

source "./commands/default.sh"
source "./commands/install.sh"
source "./commands/symlink.sh"
source "./commands/list.sh"
source "./commands/help.sh"

source "./initializer.sh"

# --------------------------------------------------------------------------------------------------

declare OPT_INIT=0
declare OPT_ALL=0
declare OPT_YES=0
declare OPT_EXCLUDE=0
declare OPT_DEBUG_LOG=0
declare OPT_DRY_RUN=0

# --------------------------------------------------------------------------------------------------

main() {
  declare -r SUBCOMMAND=$1
  shift

  while [[ -n "$1" ]]; do
    case $1 in
      --init )
        OPT_INIT=1
        shift
        ;;
      -a | --all )
        OPT_ALL=1
        shift
        ;;
      -y | --yes )
        OPT_YES=1
        shift
        ;;
      -e | --exclude )
        OPT_EXCLUDE=1
        shift
        ;;
      -d | --debug-log )
        OPT_DEBUG_LOG=1
        shift
        ;;
      -b | --base-dir )
        shift # Take next arg

        DOTFILES="$(
          cd "$CURRENT_WORKING_DIRECTORY" \
            && readlink -f $1
        )"

        if [[ -z "$DOTFILES" ]]; then
          echo
          output::error "Missing argument for --base-dir; Aborting.";
          exit 1
        fi

        if ! [[ -d "$DOTFILES" ]]; then
          echo
          output::error "$DOTFILES is not a directory; Aborting.";
          exit 1
        fi

        shift
        ;;
      -D | --dry-run )
        OPT_DRY_RUN=1
        shift
        ;;
      * )
        break
        ;;
    esac
  done

  case "$SUBCOMMAND" in
    install )
      command::install "$@"
      exit 0
      ;;
    symlink )
      command::symlink "$@"
      exit 0
      ;;
    list )
      command::list "$@"
      exit 0
      ;;
    -h | --help )
      command::help "$@"
      exit 0
      ;;
    "" )
      command::default "$@"
      exit 0
      ;;
    * )
      echo
      output::error "Unknown command $SUBCOMMAND; Aborting";
      exit 1;
      ;;
  esac
}

main "$@"

