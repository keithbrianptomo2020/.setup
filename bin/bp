#!/usr/bin/env bash

# This s a little script that helps me manage my boilerplates. I have a git
# repository where I keep all of them: each sub directory is a boilerplate
# project (an empty node module template or a chrome extension, for instance).

# I use git's `subtree` command to copy a certain boilerplate. It's better than
# simply using `cp`, as it does not copy ignored files and directories. Also,
# it is possible to keep the commit history relevant to the subtree we're
# copying.

# ---------------------------------------------

declare -r BOILERPLATES_HOME="$HOME/dev/gitlab/boilerplates"

# ---------------------------------------------

print_error() {
  printf "\\e[0;31m\\033[1mERROR\\033[0m\\e[0m %s\\n" "$1"
}

print_step() {
  printf "\\e[0;33m\\033[1mSTEP\\033[0m\\e[0m %s\\n" "$1"
}

print_success() {
  printf "\\e[0;32m\\033[1mSUCCESS\\033[0m\\e[0m %s\\n" "$1"
}


# ---------------------------------------------

list_boilerplates() {
  find "$BOILERPLATES_HOME" \
    -type d \
    -depth 1 \
    ! -path "*/\\.*" \
    -exec basename "{}" \;
}

copy_boilerplate() {
  local -r ARG_BP_NAME="$1"
  local -r ARG_DEST="$2"

  local -r DEST_REALPATH="$(realpath "$ARG_DEST" 2> /dev/null)"
  local -r TMP_DIR="$(mktemp -d)"

  if [[ -z "$ARG_BP_NAME" ]]; then
    print_error "Argument [bp_name] is required"
    exit 1
  fi

  if [[ -z "$ARG_DEST" ]]; then
    print_error "Argument [dest] is required"
    exit 1
  fi

  if ! [[ -e "$BOILERPLATES_HOME/$ARG_BP_NAME" ]]; then
    print_error "Boilerplate $ARG_BP_NAME is not exist"
    exit 1
  fi

  if [[ -e "$DEST_REALPATH" ]]; then
    print_error "Destination $DEST_REALPATH already exists"
    exit 1
  fi

  print_step "Creating a temporary git repository in $TMP_DIR"
  git init "$TMP_DIR" --bare &> /dev/null

  cd "$BOILERPLATES_HOME" \
    || exit 1

  print_step "Create a subtree split in $BOILERPLATES_HOME"
  git subtree split --prefix="$ARG_BP_NAME" -b tmp-branch &> /dev/null

  print_step "Pusing the split into the temporary repository"
  git push -f "$TMP_DIR" tmp-branch:master &> /dev/null

  print_step "Deleting the split from the boilerplates repository"
  git branch -D tmp-branch &> /dev/null

  print_step "Cloning the temporary repository into $DEST_REALPATH"
  git clone "$TMP_DIR" "$DEST_REALPATH" &> /dev/null

  cd "$DEST_REALPATH" \
    || exit 1

  print_step "Removing .git folder"
  rm -rf .git

  print_success "Done. Check out $DEST_REALPATH"
}

# ---------------------------------------------

print_help() {
  cat <<EOF

  Boilerplates manager

  Usage
    bp <command> [options]

  Commands
    ls                      List available boilerplates
    cp                      Copy a boilerplate

  Options
    -h, --help              Show help output
EOF
}

# ---------------------------------------------

main() {
  declare -r cmd=$1
  shift

  case "$cmd" in
    ls )
      list_boilerplates "$@"
      exit 0
      ;;
    cp )
      copy_boilerplate "$@"
      exit 0
      ;;
    "" | -h | --help)
      print_help
      exit 0
      ;;
    * )
      print_error "Unknown command $cmd";
      exit 1;
      ;;
  esac
}

main "$@"
