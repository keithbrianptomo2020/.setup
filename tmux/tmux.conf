# vim: set foldmethod=marker foldlevel=0:

# Core {{{

# Reattach each new window to the user bootstrap namespace
# if-shell \
#   'test "$(uname -s)" = Darwin' \
#   'set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"'

# Maintain a 'gapless' sequence for windows number
set -g renumber-windows on

# Enable true color & italics support
# https://medium.com/@dubistkomisch/how-to-actually-get-italics-and-true-colour-to-work-in-iterm-tmux-vim-9ebe55ebc2be
set -g default-terminal 'tmux-256color'
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

# Constrain window size to the maximum size of any
# client connected to that window
setw -g aggressive-resize on

# Make delay shorter
set -sg escape-time 0

# Unding default prefix and set it to Ctrl-a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Make windows / panes index start with 1
set -g base-index 1
setw -g pane-base-index 1

# Visual notification of activity in other windows
setw -g monitor-activity on

# Prevent tmux from displaying "Activity in window X" messages.
set -g visual-activity off

# Don't rename windows automatically
set-option -g allow-rename off

# Support focus events
set -g focus-events on

# Persist tmux messages a little longer, regardless of `status-interval`
set -g display-time 2000

# Enable cursor shape modification in vim
# (https://github.com/neovim/neovim/wiki/FAQ)
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Set copy-mode to act more like vim
set -g mode-keys vi
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel pbcopy
bind-key -Tcopy-mode-vi Escape send -X cancel

# }}}
# Splits {{{

# Spliting (and keep the cwd)
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind "\\" split-window -fh -c "#{pane_current_path}"
bind _ split-window -fv -c "#{pane_current_path}"

# Resize
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Selecting
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Spread panes evenly
unbind =
bind = select-layout tiled

# }}}
# Key bindings {{{

# Reload config file
bind r display "Reloading..." \; source-file "$XDG_CONFIG_HOME/tmux/tmux.conf" \; display "Reloaded!"

# Synchronize all panes
bind y setw synchronize-panes

# Toggle mouse mode
bind M set-option mouse

# Set default name for new windows
bind-key c new-window -n '<unamed>' -c "#{pane_current_path}"

# Create a new session
bind-key C command-prompt -p "Name of new session:" "new-session -s '%%' -c \"#{pane_current_path}\""

# Easy layout changing
bind-key -n M-1 select-layout even-horizontal
bind-key -n M-2 select-layout even-vertical
bind-key -n M-3 select-layout main-horizontal
bind-key -n M-4 select-layout main-vertical
bind-key -n M-5 select-layout tiled

# }}}
# Theme {{{

# Status bar config
set -g status on
set -g status-position bottom
set -g status-interval 1
set -g status-justify "left"
set -g status-left-length 200
set -g status-right-length 200

# Pane border
setw -g pane-border-status bottom
setw -g pane-border-format '─'
set -g pane-border-style fg=colour235
set -g pane-active-border-style fg=blue

# Status bar colors
set -g status-style fg=brightwhite,bg=black
set -g message-style fg=yellow,bg=black

# Window separator
setw -g window-status-separator '#[fg=colour235 nobold] ⋅ #[bg=default fg=default]'

# Window item
setw -g window-status-format "#[bg=black, noreverse]#{?window_activity_flag,#[fg=red],#[fg=colour235]}#I #W"

# Selected window item
setw -g window-status-current-format "#[fg=cyan bold, bg=black, noreverse]#I #{?window_zoomed_flag,[#W],#W}"

# Left side: session name
set -g status-left "#[fg=yellow] tm:#[fg=green nobold]#S#{window-status-separator}"

# Right side: indicator when prefix is selected + right segments
set -g status-right "#{?client_prefix,#[fg=blue bold]^A#{window-status-separator},}#($DOTFILES/tmux/status_line.sh)"

# }}}
# Spotify starrer {{{

# This allows to "save" the current track playing in Spotify by using a keybinding.
# This is still a POC, I'll probably wrap it as a plugin later on.
#
# `prefix + v` to star the current track
# `prefix + V` to unstar the current track
#
# You can use https://github.com/spotify/web-api-auth-examples to retrieve a token.
#
# TODO:
# =============
# - Wrap this thing as a plugin
# - Avoid re-starring, since it'll move the current track to the top of the library
# - Provide an indicator for starred tracks
# - Proper error handling

set-environment -g TMUX_SPOTIFY_API_KEY $TMUX_SPOTIFY_API_KEY

bind-key v run-shell \
  'tmux display-message "Starring current track..." \
    && curl -X "PUT" \
      "https://api.spotify.com/v1/me/tracks?ids=$(osascript "$DOTFILES"/_misc/applescripts/spotify_get_track_id.scpt)" \
      -d "" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $TMUX_SPOTIFY_API_KEY"  \
    && tmux display-message "Starred!"'

bind-key V confirm-before -p 'Unstar current track? (y/n)' \
  'run-shell \
    "tmux display-message \"Unstarring current track...\" \
      && curl -X \"DELETE\" \
        \"https://api.spotify.com/v1/me/tracks?ids=$(osascript \"$DOTFILES\"/_misc/applescripts/spotify_get_track_id.scpt)\" \
        -d \"\" \
        -H \"Accept: application/json\" \
        -H \"Content-Type: application/json\" \
        -H \"Authorization: Bearer $TMUX_SPOTIFY_API_KEY\"  \
      && tmux display-message \"Unstarred!\""'

# }}}
# Screensaver \ Lockscreen? {{{

bind-key S new-session "pipes" \; \
  set-window-option status off \; \
  set-window-option pane-border-status off

# }}}
# Plugins {{{

set-environment -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tpm/"

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'yardnsm/tmux-1password'
set -g @plugin 'christoomey/vim-tmux-navigator'

# Plugins configuration
set -g @resurrect-capture-pane-contents 'on'

set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm,fullscreen'
# set -g @continuum-restore 'on'

# Initialize TPM
run-shell -b $DOTFILES/.submodules/tpm/tpm

# }}}
